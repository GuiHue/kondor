# ---------- POSTGUI  ----------
# Handles anything that needs to setup after the GUI components are loaded
# Includes:
#   - Control Panel Buttons
#   - Status lights

#net     estop-out                               <= iocontrol.0.user-enable-out
#net     DI_ESTOP-ext                            => iocontrol.0.emc-enable-in

source  hallib/pendant2.hal
source  hallib/estop.hal

# ------- Feed Rate Override -------
# Uses 10k potentiometer at control panel to control feed rate
# Uses same potentiometer to adapt rapid rate but with different scale
# 1.0 / 23.75V = 0.0421
# gmoccapy applies the scaled value to the specified range according to ini and considers this to be 1
# For Feed Rate Override this is from 0 to [DISPLAY]MAX_FEED_OVERRIDE
# For Spindle Override this is from [DISPLAY]MIN_SPINDLE_OVERRIDE to [DISPLAY]MAX_SPINDLE_OVERRIDE
# As long as the range is symmetric to 100% this is easy 

setp    scale.feed.gain                             8.1
setp    scale.feed.offset                           16.9
# rapid override needs to be scaled differently as the scale width is smaller: 0-100%
# 2.0 / 23.75V = 0.0421
#setp    scale.rapid.gain                            4.21
#setp    scale.rapid.offset                          7.5
setp    lowpass.feed.gain                           0.01
net     AI_CP-pot-feed                              lowpass.feed.in
net     lowpass-scale-feed-signal                   lowpass.feed.out                    scale.feed.in                                   #scale.rapid.in   
net     feed-override-scale      scale.feed.out  => conv_fls32.feed.in
net     feed-override-scale-conv conv_fls32.feed.out halui.feed-override.counts 
#net     rapid-override-scale      scale.rapid.out  => conv_fls32.rapid.in
#net     rapid-override-scale-conv conv_fls32.rapid.out halui.rapid-override.counts 

setp    halui.feed-override.direct-value false
setp    halui.feed-override.scale 0.01
#setp    halui.rapid-override.direct-value false
#setp    halui.rapid-override.scale 0.01

# ------- Spindle Override -------
# Uses 10k potentiometer at control panel to control spindle rpm
# 1.0 / 23.8V = 0.04201
# may need correction by offsetting


setp    scale.spindle.gain                          5.2925
setp    scale.spindle.offset                          7.5
setp    lowpass.spindle.gain                        0.01
net     AI_CP-pot-spindle                           => lowpass.spindle.in
net     low-spindle                                 lowpass.spindle.out                 scale.spindle.in
net     spindle-override-scale      scale.spindle.out  => conv_fls32.spindle-scale.in
net     spindle-override-scale-conv conv_fls32.spindle-scale.out halui.spindle.0.override.counts
setp    halui.spindle.0.override.direct-value false
setp    halui.spindle.0.override.scale 0.01

# -------- probe basic spindle data --------
net  spindle-current qtpyvcp.spindle-load-indicator.in-f 
setp qtpyvcp.spindle-load-indicator.max-val 8
setp qtpyvcp.spindle-load-indicator.min-val 0

net spindle-temp qtpyvcp.spindle-temp.in 
net spindle-at-speed qtpyvcp.spindleatspeed.on



# -------- MACHINE ON --------
# Uses a momentary switch at contro panel to turn the machine on/off
net     DI_CP-machine-on-button                     <= toggle.machineon.in 
net     machineon-toogle                            toggle2nist.machineon.in            <= toggle.machineon.out
net     machine-is-on                               toggle2nist.machineon.is-on
net     machineon-pwr-on                            halui.machine.on                    <= toggle2nist.machineon.on
net     machineon-pwr-off                           halui.machine.off                   <= toggle2nist.machineon.off

# -------- Start/Resume Hold/Pause --------
# External Program Pause/Resume and Run/Step Buttons
# This is how they function:
# Pressing Run/Step will begin executing a program.
# Pressing Hold/Resume while a program is running will pause the program.
# Pressing Run/Step while a program is paused will single step the program.
# Pressing Hold/Resume while a program is paused will return it to normal run mode.

# Pause/Resume Section
net     DI_CP-cycle-pause-button                    or.program-pause.in0
net     pause-signal                                or.program-pause.out                 and.pauseresume1.in0                and.pauseresume2.in0 
net     pause-on                                    toggle2nist.externalprogram.is-on   and.pauseresume1.in1            and.runstep2.in1            <= halui.program.is-paused      and.ledyellow.in0 
net     run-on                                      and.pauseresume2.in1                <= halui.program.is-running     mux4.ledgreen.sel0          conv_bit_float.runon.in         
net     run-on-bf                                   conv_bit_float.runon.out            mux4.ledgreen.in1
net     pause-sig                                   or.externalprogram.in0             <= and.pauseresume1.out
net     resume-sig                                  or.externalprogram.in1             <= and.pauseresume2.out
net     toggle-ok                                   toggle.externalprogram.in           <= or.externalprogram.out
net     togglesig                                   toggle2nist.externalprogram.in      <= toggle.externalprogram.out
net     toggleon                                    halui.program.pause                 <= toggle2nist.externalprogram.on
net     toggleoff                                   halui.program.resume                <= toggle2nist.externalprogram.off

# Run/Step Section
net     DI_CP-cycle-start-button                    or.program-run.in0                  # other in from pendant in pendant.hal
net     runsignalin                                 or.program-run.out                  and.runstep1.in0                    and.runstep2.in0
net     idle-on                                     and.runstep1.in1                    <= halui.program.is-idle
net     run-sig                                     halui.mode.auto                     halui.program.run               <= and.runstep1.out
net     step-sig                                    halui.program.step                  timedelay.stepsig.in            <= and.runstep2.out
setp    timedelay.stepsig.on-delay                  0
setp    timedelay.stepsig.off-delay                 2

# Status light setup
# YELLOW LED - Blink when pause active
setp    timedelay.ledyellow.on-delay                   0.5
setp    timedelay.ledyellow.off-delay                  0.5
net     DO_CP-light-yellow                              timedelay.ledyellow.out        not.ledyellow.in      hm2_7i76e.0.TsHW.0.1.led-09     
net     ledyellow-not                                  not.ledyellow.out              and.ledyellow.in1
net     ledyellow-toogle                               and.ledyellow.out              timedelay.ledyellow.in

# GREEN LED: on when run-on=high + step-sig-delay=low and blinking for short period of time when run-on=low + step-sig=high
# mux4.ledgreen          sel1       timedelay.stepsig.out   sel0 run-on (linked above)
# mux4.ledgreen          sel1=high   sel0=low    in2 --> blink
# mux4.ledgreen          sel1=low    sel0=high   in1 --> on
net     timedelay-stepsig                           timedelay.stepsig.out           mux4.ledgreen.sel1      and.ledgreen.in0
setp    timedelay.ledgreen.on-delay                   0.5
setp    timedelay.ledgreen.off-delay                  0.5
net     ledgreen-blink-out                          timedelay.ledgreen.out          not.ledgreen.in       conv_bit_float.ledgreen.in
net     ledgreen-blink-fb                           conv_bit_float.ledgreen.out     mux4.ledgreen.in2      
net     ledgreen-not                                not.ledgreen.out                and.ledgreen.in1
net     ledgreen-toogle                             and.ledgreen.out                timedelay.ledgreen.in
net     ledgreen-flu32                              mux4.ledgreen.out               conv_flu32.ledgreen.in
net     ledgreen-conv_u32b                          conv_flu32.ledgreen.out         conv_u32b.ledgreen.in
net     DO_CP-light-green                           conv_u32b.ledgreen.out          hm2_7i76e.0.TsHW.0.1.led-03

# Stop/ abort program
net     DI_CP-cycle-stop-button                     halui.program.stop
# Note, that the red light is not being used to indicate any status of the program being stopped but rather emergency behaviour

loadusr -W hal_manualtoolchange
net tool-change iocontrol.0.tool-change => hal_manualtoolchange.change
net tool-changed iocontrol.0.tool-changed <= hal_manualtoolchange.changed
net tool-number iocontrol.0.tool-prep-number => hal_manualtoolchange.number
net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared

# -------- probe basic spindle data --------
net  spindle-current qtpyvcp.spindle-load-indicator.in-f 
setp qtpyvcp.spindle-load-indicator.max-val 8
setp qtpyvcp.spindle-load-indicator.min-val 0
net vfd-temp qtpyvcp.vfd-temp.in
net spindle-current  qtpyvcp.spindle-amp.in 

net spindle-temp qtpyvcp.spindle-temp.in 
net spindle-at-speed qtpyvcp.spindleatspeed.on

# ---------- DECREASE VFD WATCHDOG TIMEOUT ----------

setp     watchdog.timeout-0                    1.0



##############################################################################
# ---------- WARNINGS  ---------- 
# Servo Warning Signals are connected to linuxcnc without further detailled function
# Delta manual remains unclear when warn is triggered
# Note: Warnings are User information and presently not part of estop!

# ----- Merge Drive Warnings ----- 
# in-0  Servo X         HIGH when OK
# in-1  Servo Y1        HIGH when OK    
# in-2  Servo Y2        HIGH when OK
# in-3  Servo Z         HIGH when OK
# in-4  Servo A         not connected
# Out   High when ok   
# High when any of the inputs goes high
setp    lut5.drivewarning.function              0x8000
net     DI_DRIVE-x-warn                         lut5.drivewarning.in-0
net     DI_DRIVE-y1-warn                        lut5.drivewarning.in-1
net     DI_DRIVE-y2-warn                        lut5.drivewarning.in-2
net     DI_DRIVE-z-warn                         lut5.drivewarning.in-3
# net     DI_DRIVE-a-warn                        lut5.drivewarning.in-4

# ----- Trigger Warnings -----  
# Drive alarm
setp    m_drivealm.edge                         1 
net     estop-drive-alarm                       m_drivealm.trigger                    
# Drive warning
setp    m_drivewarn.edge                        0
net     m-drive-warning                         lut5.drivewarning.out   m_drivewarn.trigger
# Low Pressure Warning
setp    m_lowpressure.edge                      0
net     DI_AIR-pressure-alarm                   m_lowpressure.trigger
# Spindle temperature warning
setp    m_tempwarn.edge                         1
net     m-spindle-temp-warning                  comp.temp.out           m_tempwarn.trigger
# External Estop
setp    m_estopext.edge                         0
net     DI_ESTOP-ext                            m_estopext.trigger
# Watchdog
setp    m_vfdcom.edge                           0
net     estop-vfd-watchdog                      m_vfdcom.trigger
# VFD Error
setp    m_vfderror.edge                         1
net     estop-vfd-error                         m_vfderror.trigger
# Pedant estop 
setp    m_pendantestop.edge                     0
net     pendant_estop                         m_pendantestop.trigger