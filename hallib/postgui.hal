# ---------- POSTGUI  ----------
# Handles anything that needs to setup after the GUI components are loaded
# Includes:
#   - Control Panel Buttons
#   - Status lights

#net     estop-out                               <= iocontrol.0.user-enable-out
#net     DI_ESTOP-ext                            => iocontrol.0.emc-enable-in

source  hallib/pendant2.hal
source  hallib/estop.hal

# ------- Feed Rate Override -------
# Uses 10k potentiometer at control panel to control feed rate
# Uses same potentiometer to adapt rapid rate but with different scale
# 1.0 / 23.75V = 0.0421
# gmoccapy applies the scaled value to the specified range according to ini and considers this to be 1
# For Feed Rate Override this is from 0 to [DISPLAY]MAX_FEED_OVERRIDE
# For Spindle Override this is from [DISPLAY]MIN_SPINDLE_OVERRIDE to [DISPLAY]MAX_SPINDLE_OVERRIDE
# As long as the range is symmetric to 100% this is easy 

setp    scale.feed.gain                             0.0421
setp    scale.feed.offset                           0.0
# rapid override needs to be scaled differently as the scale width is smaller: 0-100%
# 2.0 / 23.75V = 0.0421
setp    scale.rapid.gain                            0.0842
setp    scale.rapid.offset                          0.05
setp    lowpass.feed.gain                           0.01
net     AI_CP-pot-feed                              lowpass.feed.in
net     lowpass-scale-feed-signal                   lowpass.feed.out                    scale.feed.in                                   scale.rapid.in   
net     scale-gmoccapy-feed                         scale.feed.out                      => gmoccapy.feed.feed-override.direct-value      
net     scale-gmoccapy-rapid                        scale.rapid.out                     => gmoccapy.rapid.rapid-override.direct-value
setp    gmoccapy.rapid.rapid-override.analog-enable 1
setp    gmoccapy.feed.feed-override.analog-enable   1

# ------- Spindle Override -------
# Uses 10k potentiometer at control panel to control spindle rpm
# 1.0 / 23.8V = 0.04201
# may need correction by offsetting
setp    scale.spindle.gain                          0.04201
setp    lowpass.spindle.gain                        0.05
net     AI_CP-pot-spindle                           => lowpass.spindle.in
net     low-spindle                                 lowpass.spindle.out                 scale.spindle.in
net     spindle-override-scaled                     scale.spindle.out                   => gmoccapy.spindle.spindle-override.direct-value
setp    gmoccapy.spindle.spindle-override.analog-enable   1

# -------- MACHINE ON --------
# Uses a momentary switch at contro panel to turn the machine on/off
net     DI_CP-machine-on-button                     <= toggle.machineon.in 
net     machineon-toogle                            toggle2nist.machineon.in            <= toggle.machineon.out
net     machine-is-on                               toggle2nist.machineon.is-on
net     machineon-pwr-on                            halui.machine.on                    <= toggle2nist.machineon.on
net     machineon-pwr-off                           halui.machine.off                   <= toggle2nist.machineon.off

# -------- Start/Resume Hold/Pause --------
# External Program Pause/Resume and Run/Step Buttons
# This is how they function:
# Pressing Run/Step will begin executing a program.
# Pressing Hold/Resume while a program is running will pause the program.
# Pressing Run/Step while a program is paused will single step the program.
# Pressing Hold/Resume while a program is paused will return it to normal run mode.

# Pause/Resume Section
net     DI_CP-cycle-pause-button                    or.program-pause.in0
net     pause-signal                                or.program-pause.out                 and.pauseresume1.in0                and.pauseresume2.in0 
net     pause-on                                    toggle2nist.externalprogram.is-on   and.pauseresume1.in1            and.runstep2.in1            <= halui.program.is-paused      and.ledyellow.in0 
net     run-on                                      and.pauseresume2.in1                <= halui.program.is-running     mux4.ledgreen.sel0          conv_bit_float.runon.in         
net     run-on-bf                                   conv_bit_float.runon.out            mux4.ledgreen.in1
net     pause-sig                                   or.externalprogram.in0             <= and.pauseresume1.out
net     resume-sig                                  or.externalprogram.in1             <= and.pauseresume2.out
net     toggle-ok                                   toggle.externalprogram.in           <= or.externalprogram.out
net     togglesig                                   toggle2nist.externalprogram.in      <= toggle.externalprogram.out
net     toggleon                                    halui.program.pause                 <= toggle2nist.externalprogram.on
net     toggleoff                                   halui.program.resume                <= toggle2nist.externalprogram.off

# Run/Step Section
net     DI_CP-cycle-start-button                    or.program-run.in0                  # other in from pendant in pendant.hal
net     runsignalin                                 or.program-run.out                  and.runstep1.in0                    and.runstep2.in0
net     idle-on                                     and.runstep1.in1                    <= halui.program.is-idle
net     run-sig                                     halui.mode.auto                     halui.program.run               <= and.runstep1.out
net     step-sig                                    halui.program.step                  timedelay.stepsig.in            <= and.runstep2.out
setp    timedelay.stepsig.on-delay                  0
setp    timedelay.stepsig.off-delay                 2

# Status light setup
# YELLOW LED - Blink when pause active
setp    timedelay.ledyellow.on-delay                   0.5
setp    timedelay.ledyellow.off-delay                  0.5
net     DO_CP-light-yellow                              timedelay.ledyellow.out        not.ledyellow.in      hm2_7i76e.0.TsHW.0.1.led-09     
net     ledyellow-not                                  not.ledyellow.out              and.ledyellow.in1
net     ledyellow-toogle                               and.ledyellow.out              timedelay.ledyellow.in

# GREEN LED: on when run-on=high + step-sig-delay=low and blinking for short period of time when run-on=low + step-sig=high
# mux4.ledgreen          sel1       timedelay.stepsig.out   sel0 run-on (linked above)
# mux4.ledgreen          sel1=high   sel0=low    in2 --> blink
# mux4.ledgreen          sel1=low    sel0=high   in1 --> on
net     timedelay-stepsig                           timedelay.stepsig.out           mux4.ledgreen.sel1      and.ledgreen.in0
setp    timedelay.ledgreen.on-delay                   0.5
setp    timedelay.ledgreen.off-delay                  0.5
net     ledgreen-blink-out                          timedelay.ledgreen.out          not.ledgreen.in       conv_bit_float.ledgreen.in
net     ledgreen-blink-fb                           conv_bit_float.ledgreen.out     mux4.ledgreen.in2      
net     ledgreen-not                                not.ledgreen.out                and.ledgreen.in1
net     ledgreen-toogle                             and.ledgreen.out                timedelay.ledgreen.in
net     ledgreen-flu32                              mux4.ledgreen.out               conv_flu32.ledgreen.in
net     ledgreen-conv_u32b                          conv_flu32.ledgreen.out         conv_u32b.ledgreen.in
net     DO_CP-light-green                           conv_u32b.ledgreen.out          hm2_7i76e.0.TsHW.0.1.led-03

# Stop/ abort program
net     DI_CP-cycle-stop-button                     halui.program.stop
# Note, that the red light is not being used to indicate any status of the program being stopped but rather emergency behaviour

# -------- GMOCCAPY Spindle Setup --------
# Connect spindle information to gmoccapy spindle info display
net     spindle-at-speed                            => gmoccapy.spindle_at_speed_led 
net     spindle-vel-cmd-rps-abs                     => gmoccapy.spindle_feedback_bar


# -------- GMOCCAPY Tool Setup --------
#unlinkp iocontrol.0.tool-change
#unlinkp iocontrol.0.tool-changed
#unlinkp iocontrol.0.tool-prep-number
#unlinkp iocontrol.0.tool-prepared
#net tool-change gmoccapy.toolchange-change <= iocontrol.0.tool-change
#net tool-changed gmoccapy.toolchange-changed <= iocontrol.0.tool-changed
#net tool-prep-number gmoccapy.toolchange-number <= iocontrol.0.tool-prep-number

# -------- PROBE SCREEN --------
# Ensure all toolchange pins are free to use
#unlinkp iocontrol.0.tool-number
#unlinkp iocontrol.0.tool-prep-number
#unlinkp iocontrol.0.tool-change
#unlinkp iocontrol.0.tool-changed
#unlinkp iocontrol.0.tool-prepare
#unlinkp iocontrol.0.tool-prepared

# -------- merge probe signal --------



# The next two lines are only needed if the pins had been connected before
unlinkp iocontrol.0.tool-change
unlinkp iocontrol.0.tool-changed

# link to auto tool measurement toolchange, so you get the advantage of tool description on change dialog

# this settings were moved to probe_screen.hal:
#net tool-change            probe.toolchange-change    <=   iocontrol.0.tool-change 
#net tool-changed           probe.toolchange-changed   <=   iocontrol.0.tool-changed
#net tool-prep-number       probe.toolchange-number    <=   iocontrol.0.tool-prep-number

net tool-prep-loop         iocontrol.0.tool-prepare      <=   iocontrol.0.tool-prepared



# ---------- DECREASE VFD WATCHDOG TIMEOUT ----------

setp     watchdog.timeout-0                    1.0